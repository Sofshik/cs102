# -*- coding: utf-8 -*-
"""assignment01_adult_pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L6BlWuz83bBzeqdpxD6diUALImg27qzM

<img src="../../img/ods_stickers.jpg">

## <center> [mlcourse.ai](https://mlcourse.ai) – открытый курс OpenDataScience по машинному обучению 

Автор материала: Юрий Кашницкий (@yorko в Slack ODS). Материал распространяется на условиях лицензии [Creative Commons CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/). Можно использовать в любых целях (редактировать, поправлять и брать за основу), кроме коммерческих, но с обязательным упоминанием автора материала.

# <center>Домашнее задание № 1 (демо).<br> Анализ данных по доходу населения UCI Adult</center>

**В задании предлагается с помощью Pandas ответить на несколько вопросов по данным репозитория UCI [Adult](https://archive.ics.uci.edu/ml/datasets/Adult) (качать данные не надо – они уже есть в репозитории). Для отправки решений используйте [онлайн-форму](https://docs.google.com/forms/d/1xAzU-5N6oEeR4UG8G44V6XL-Kbr4WYcPBG45Kijge2Y).**

Уникальные значения признаков (больше информации по ссылке выше):
- age: continuous.
- workclass: Private, Self-emp-not-inc, Self-emp-inc, Federal-gov, Local-gov, State-gov, Without-pay, Never-worked.
- fnlwgt: continuous.
- education: Bachelors, Some-college, 11th, HS-grad, Prof-school, Assoc-acdm, Assoc-voc, 9th, 7th-8th, 12th, Masters, 1st-4th, 10th, Doctorate, 5th-6th, Preschool.
- education-num: continuous.
- marital-status: Married-civ-spouse, Divorced, Never-married, Separated, Widowed, Married-spouse-absent, Married-AF-spouse.
- occupation: Tech-support, Craft-repair, Other-service, Sales, Exec-managerial, Prof-specialty, Handlers-cleaners, Machine-op-inspct, Adm-clerical, Farming-fishing, Transport-moving, Priv-house-serv, Protective-serv, Armed-Forces.
- relationship: Wife, Own-child, Husband, Not-in-family, Other-relative, Unmarried.
- race: White, Asian-Pac-Islander, Amer-Indian-Eskimo, Other, Black.
- sex: Female, Male.
- capital-gain: continuous.
- capital-loss: continuous.
- hours-per-week: continuous.
- native-country: United-States, Cambodia, England, Puerto-Rico, Canada, Germany, Outlying-US(Guam-USVI-etc), India, Japan, Greece, South, China, Cuba, Iran, Honduras, Philippines, Italy, Poland, Jamaica, Vietnam, Mexico, Portugal, Ireland, France, Dominican-Republic, Laos, Ecuador, Taiwan, Haiti, Columbia, Hungary, Guatemala, Nicaragua, Scotland, Thailand, Yugoslavia, El-Salvador, Trinadad&Tobago, Peru, Hong, Holand-Netherlands.   
- salary: >50K,<=50K
"""

import pandas as pd

data = pd.read_csv("https://raw.githubusercontent.com/Yorko/mlcourse.ai/master/data/adult.data.csv")
data.head()

"""**1. Сколько мужчин и женщин (признак *sex*) представлено в этом наборе данных?**"""

print(data['sex'].value_counts())

"""**2. Каков средний возраст (признак *age*) женщин?**"""

print(data[data['sex'] == 'Female']['age'].mean())

"""**3. Какова доля граждан Германии (признак *native-country*)?**"""

print(float((data['native-country'] == 'Germany').sum()) / data.shape[0])

"""**4-5. Каковы средние значения и среднеквадратичные отклонения возраста тех, кто получает более 50K в год (признак *salary*) и тех, кто получает менее 50K в год? **"""

less = data[data['salary'] == '<=50K']
more = data[data['salary'] == '>50K']

less_mean = round(less['age'].mean())
more_mean = round(more['age'].mean())
less_std = round(less['age'].std(ddof=0))
more_std = round(more['age'].std(ddof=0))
print(("Mean age and standart deviation (less than 50K): %i +- %i years") % (less_mean, less_std))
print(("Mean age and standart deviation (more than 50K): %i +- %i years") % (more_mean, more_std))

"""**6. Правда ли, что люди, которые получают больше 50k, имеют как минимум высшее образование? (признак *education – Bachelors, Prof-school, Assoc-acdm, Assoc-voc, Masters* или *Doctorate*)**"""

print(data[data['salary'] == '>50K']['education'].unique())

"""**7. Выведите статистику возраста для каждой расы (признак *race*) и каждого пола. Используйте *groupby* и *describe*. Найдите таким образом максимальный возраст мужчин расы *Amer-Indian-Eskimo*.**"""

group_data = data.groupby(['race', 'sex'])
for (race, sex), data in group_data:
  print("Race: %s, sex: %s" % (race, sex))
  print(data["age"].describe())

"""**8. Среди кого больше доля зарабатывающих много (>50K): среди женатых или холостых мужчин (признак *marital-status*)? Женатыми считаем тех, у кого *marital-status* начинается с *Married* (Married-civ-spouse, Married-spouse-absent или Married-AF-spouse), остальных считаем холостыми.**"""

print(data[(data['sex'] == 'Male') & (data['marital-status'].isin(['Divorced', 'Never-married', 'Separated', 'Widowed'
]))
]['salary'].value_counts())

print(data[(data['sex'] == 'Male') & (data['marital-status'].str.startswith('Married'))
]['salary'].value_counts())

data['marital-status'].value_counts()

"""**9. Какое максимальное число часов человек работает в неделю (признак *hours-per-week*)? Сколько людей работают такое количество часов и каков среди них процент зарабатывающих много?**"""

print('Max hours per week:', data['hours-per-week'].max())
print('Amount of people working max hours per week:', len(data[data['hours-per-week'] == data['hours-per-week'].max()]))

perc = round(
    len(data[(data['hours-per-week'] == data['hours-per-week'].max()) & (data['salary'] == '>50K')]) / 
    len(data[data['hours-per-week'] == data['hours-per-week'].max()]), 2
) * 100
print('Percent of wealthy and hardworking: %i%%' % perc)

"""**10. Посчитайте среднее время работы (*hours-per-week*) зарабатывающих мало и много (*salary*) для каждой страны (*native-country*).**"""

for (country, salary), group_data in data.groupby(['native-country', 'salary']):
  print(country, salary, round(group_data['hours-per-week'].mean()))